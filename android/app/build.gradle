apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

// Konwersja wersji na liczbę
static def versionToNumber(major, minor, patch) {
    return patch * 100 + minor * 10000 + major * 1000000
}

// Wyciąganie wersji RN (zamiast dynamicznego wywołania, można ustawić ręcznie)
def rnVersion = versionToNumber(0, 74, 5) // 0.74.5 jako przykład, użyj aktualnej wersji w razie potrzeby

react {
    // Stała ścieżka do pliku entry (usuwa złożone komendy `node`)
    entryFile = file("$projectRoot/android/index.js")
    reactNativeDir = new File(rootDir, "node_modules/react-native")
    codegenDir = new File(rootDir, "node_modules/@react-native/codegen")
    bundleCommand = "export:embed"
}

android {
    // Przypisanie wartości SDK i wersji z `android/build.gradle`
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion
    namespace 'com.matisp6.tripify'

    defaultConfig {
        applicationId 'com.matisp6.tripify'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0" 

        manifestPlaceholders = [
            facebookAppId: "@string/facebook_app_id",
            facebookClientToken: "@string/facebook_client_token",
            fbLoginProtocolScheme: "@string/fb_login_protocol_scheme"
        ]
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file('android/app/release-key.jks')
            storePassword 'Mops56xd'
            keyAlias 'your_key_alias'
            keyPassword 'Mops56xd'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
    }
}

dependencies {
    // Wersja RN ustawiona przez RN Gradle Plugin
    implementation("com.facebook.react:react-android")
    implementation 'com.facebook.android:facebook-login:latest.release'

    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

    if (isGifEnabled) {
        implementation("com.facebook.fresco:animated-gif:${reactAndroidLibs.versions.fresco.get()}")
    }

    if (isWebpEnabled) {
        implementation("com.facebook.fresco:webpsupport:${reactAndroidLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) {
            implementation("com.facebook.fresco:animated-webp:${reactAndroidLibs.versions.fresco.get()}")
        }
    }

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation 'org.webkit:android-jsc:+'
    }
}

// if (rnVersion < versionToNumber(0, 75, 0)) {
//     apply from: new File(rootDir, "node_modules/@react-native-community/cli-platform-android/native_modules.gradle")
//     applyNativeModulesAppBuildGradle(project)
// }
